### connection sur GCP ####

# aller sur https://console.glood.com  avec login : compte google

# creer un cluster kubernetes bouton CREER par defaut

# installer gcloud car on va en avoir besoin  pour se connecter
# taper gcloud cli dans le navigateur pour arriver a la doc d installation
https://cloud.google.com/sdk/docs/install?hl=fr
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates gnupg curl sudo
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
sudo apt-get update && sudo apt-get install google-cloud-cli

# installer le plugin voir : https://cloud.google.com/blog/products/containers-kubernetes/kubectl-auth-changes-in-gke
sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin

# connection au cluster - cliquer sur connect
kubectl config get-contexts
kubectl config current-context
gcloud container clusters get-credentials cformidable --region europe-west1 --project tactile-flash-408507
gcloud init // entrer choix 1
gcloud container clusters get-credentials cformidable --region europe-west1 --project tactile-flash-408507

### Tester application en local ###
# tester l'application qui aune application front vue et une application backend node qui fournit l'API
cd vue-jwt/frontend
npm install
npm run dev

cd vue-jwt/server
npm install express
npm start

http://localhost:5173/

# si on veut tester le container dockerhub. Par exemple
docker run --rm -d --name test1 -p 8085:80  atos06/gke-vue:d26b1a7
# puis localhost:8085

###  cluster k8s ######

# creation  des images dans le docker hub
cd vue-jwt/frontend
docker build -t atos06/gke-vue .
docker push atos06/gke-vue 

cd vue-jwt/server
docker build -t atos06/gke-node-api .
docker push atos06/gke-node-api



### Frontend ######

# creation du secret dans le cluster qu'on appelle docker-hub-secret pour l'acces a l'image privÃ© atos06/gke-vue dockerhub
# creer un secret sous dockerhub : myaccoubt->security-> new access token  
kubectl create secret docker-registry docker-hub-secret --docker-server=https://index.docker.io/v1/ --docker-username=atos06 --docker-password=dckr_pat_gGvb9n4bUuA01_RUjj2QBI8S0O8 --docker-email=francois.picot63@gmail.com

# deploiement du frontend et le service d 'acces aux pods
cd projet-GCP/k8s/k8s
kubectl apply -f nginx-configmap.yaml 
kubectl apply -f frontend.deployment.yaml 
kubectl apply -f frontend.service.yaml 
kubectl get pod -w
kubectl get events # si pb de status kubectl apply -f frontend.deployment.yaml


### mongo db #####

# install de mongo db dans le cluster avec helm
cd projet-GCP/k8s/helm
helm repo add bitnami https://charts.bitnami.com/bitnami
helm install -f mongodb.yaml mongodb bitnami/mongodb
kubectl get pod -w


# test de a connexion mongodb avec compass (noyez le mot de passe de la commande)
# lancer compass
kubectl get secret --namespace default mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 -d
kubectl port-forward --namespace default service/mongodb-headless 27017
Cliquez sur Fill in connection fields  en direct puis sur Authentification > Username / Password.
localhost:2017/root/<mot de passe>


### Backend API Node ######

# generer la cle ssh
cd projet-GCP/k8s/k8s
(dos2unix generate_secrets.sh )
bash ./generate_secrets.sh 
kubectl get secrets

# lancement du service backden node api
kubectl apply -f api.deployment.yaml 
kubectl apply -f api.service.yaml 
kubectl get pod -w
kubectl logs  api-deployment-b687dd897-hvpxx  // doit retourner Connected !


### Ingress ####

# lancement : pour voir ingress recherche "services kunertes" dans gcp
kubectl apply -f ingress.yaml 
kubectl get ingress app-ingress


###  Backup mongodb #####

# lancer le cron de backup
kubectl apply -f mongodb-backup-cronjob.yaml 
kubectl get cronjob.batch mongodb-backup  -w # attendre qu'il soit actif=1
kubectl get pod -w
kubectl logs mongodb-backup-28383184-vv9wl
kubectl delete cronjobs.batch  mongodb-backup 


#### creation d'un dump stocker dans le cloud ####

# creer un bucket : voir doc 
# cloud storage-> bucket -> creer : mongodb-backup-cformidable par exemple


# creer un compte de service
gcloud iam service-accounts create  cronjob-mongodb

# recuperer l'id du projet apres le @
gcloud iam service-accounts list

# affecter les droits sur ce compte
gcloud projects add-iam-policy-binding composite-jetty-134823 --member='serviceAccount:cronjob-mongodb@composite-jetty-134823.iam.gserviceaccount.com' --role='roles/storage.admin'

# generer la cle dans un fichier json
gcloud iam service-accounts keys create --iam-account cronjob-mongodb@composite-jetty-134823.iam.gserviceaccount.com service-account.json
cat service-account.json
kubectl create secret generic gcs-credentials --from-file service-account.json

# lancer le cron de backup
kubectl apply -f mongodb-backup-cronjob.yaml 

# attendre que le job  soit actif=1
kubectl get cronjob.batch mongodb-backup -w
kubectl get pod -w
kubectl logs mongodb-backup-28383184-vv9wl  # allez voir le bucket et les versions 

# arreter le cron
kubectl delete cronjobs.batch  mongodb-backup
kubectl get cronjob.batch


